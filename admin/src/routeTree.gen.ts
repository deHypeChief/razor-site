/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AdminImport } from './routes/_admin'
import { Route as IndexImport } from './routes/index'
import { Route as AuthRegisterAdminImport } from './routes/auth/registerAdmin'
import { Route as AdminUsersImport } from './routes/_admin/users'

// Create/Update Routes

const AdminRoute = AdminImport.update({
  id: '/_admin',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthRegisterAdminRoute = AuthRegisterAdminImport.update({
  id: '/auth/registerAdmin',
  path: '/auth/registerAdmin',
  getParentRoute: () => rootRoute,
} as any)

const AdminUsersRoute = AdminUsersImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => AdminRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_admin': {
      id: '/_admin'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AdminImport
      parentRoute: typeof rootRoute
    }
    '/_admin/users': {
      id: '/_admin/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof AdminUsersImport
      parentRoute: typeof AdminImport
    }
    '/auth/registerAdmin': {
      id: '/auth/registerAdmin'
      path: '/auth/registerAdmin'
      fullPath: '/auth/registerAdmin'
      preLoaderRoute: typeof AuthRegisterAdminImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface AdminRouteChildren {
  AdminUsersRoute: typeof AdminUsersRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminUsersRoute: AdminUsersRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AdminRouteWithChildren
  '/users': typeof AdminUsersRoute
  '/auth/registerAdmin': typeof AuthRegisterAdminRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AdminRouteWithChildren
  '/users': typeof AdminUsersRoute
  '/auth/registerAdmin': typeof AuthRegisterAdminRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_admin': typeof AdminRouteWithChildren
  '/_admin/users': typeof AdminUsersRoute
  '/auth/registerAdmin': typeof AuthRegisterAdminRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '' | '/users' | '/auth/registerAdmin'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/users' | '/auth/registerAdmin'
  id: '__root__' | '/' | '/_admin' | '/_admin/users' | '/auth/registerAdmin'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRouteWithChildren
  AuthRegisterAdminRoute: typeof AuthRegisterAdminRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRouteWithChildren,
  AuthRegisterAdminRoute: AuthRegisterAdminRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_admin",
        "/auth/registerAdmin"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_admin": {
      "filePath": "_admin.tsx",
      "children": [
        "/_admin/users"
      ]
    },
    "/_admin/users": {
      "filePath": "_admin/users.tsx",
      "parent": "/_admin"
    },
    "/auth/registerAdmin": {
      "filePath": "auth/registerAdmin.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
